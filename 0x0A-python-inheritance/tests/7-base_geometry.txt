The ``7-base_geometry`` module By Kipronoh
==============================

Using ``BaseGeometry``
----------------------

Importing class from the module:
```python
>>> from base_geometry import BaseGeometry

>>> geometry = BaseGeometry()

>>> geometry.area()
Traceback (most recent call last):
    ...
NotImplementedError: area() is not yet implemented

>>> geometry.integer_validator("side_length", 5)

>>> geometry.integer_validator("side_length", "five")
Traceback (most recent call last):
    ...
TypeError: side_length must be an integer

>>> geometry.integer_validator("side_length", -5)
Traceback (most recent call last):
    ...
ValueError: side_length must be greater than 0

>>> geometry.integer_validator("side_length", 0)
Traceback (most recent call last):
    ...
ValueError: side_length must be greater than 0

>>> geometry.integer_validator("side_length")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> geometry.integer_validator("side_length", 5, "extra_argument")
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> geometry.area(5, 5)
Traceback (most recent call last):
    ...
TypeError: area() takes 1 positional argument but 3 were given

>>> geometry.area(5)
Traceback (most recent call last):
    ...
TypeError: area() takes 1 positional argument but 2 were given

>>> geometry.integer_validator("side_length", (4,))
Traceback (most recent call last):
    ...
TypeError: side_length must be an integer

>>> geometry.integer_validator("side_length", [3])
Traceback (most recent call last):
    ...
TypeError: side_length must be an integer

>>> geometry.integer_validator("side_length", {3, 4})
Traceback (most recent call last):
    ...
TypeError: side_length must be an integer

>>> geometry.integer_validator("side_length", None)
Traceback (most recent call last):
    ...
TypeError: side_length must be an integer
